#ifndef NODE_H_INCLUDED
#define NODE_H_INCLUDED

/*
 * node.h
 * ======
 * 
 * Defines the abstract data type of a graph node and functions for
 * interacting with any graph node.
 * 
 * This module does not define any of the actual node types.  Specific
 * node types are defined by other modules, which then use this module
 * to wrap any kind of node type in a unified interface.
 */

#include <stddef.h>
#include <stdint.h>

/*
 * Type declarations
 * -----------------
 */

/*
 * Function pointer type for node implementation functions.
 * 
 * These functions take a pointer to the instance data for the node.
 * The render module must be in render mode before invoking functions of
 * this type.
 * 
 * The render module determines the coordinates and offset of the pixel
 * that will be generated by a call to this function
 * 
 * Parameters:
 * 
 *   pInstance - the node instance data
 * 
 * Return:
 * 
 *   the packed ARGB color of the pixel currently being rendered
 */
typedef uint32_t (*fp_node)(void *pInstance);

/*
 * Structure prototype for NODE structure.
 * 
 * Definition given in the implementation.
 */
struct NODE_TAG;
typedef struct NODE_TAG NODE;

/*
 * Public functions
 * ----------------
 */

/*
 * Define a new node.
 * 
 * pInstance can have any value including NULL.  It is always passed
 * through as-is as the first parameter to the function indicated by fp.
 * 
 * fp is the function that is used for generating pixel colors for this
 * node.  See the documentation of fp_node for further information.
 * 
 * depth is the graph depth of this node.  If this node does not invoke
 * any other nodes in its pixel generation function, depth should be set
 * to 1.  Otherwise, let S be the set of all nodes that this new node
 * invokes during its pixel generation function.  Let m be the maximum
 * of the graph depth of all nodes in S.  The depth for the new node
 * should then be (m+1).
 * 
 * Node creation will fail with an error if depth is less than one or
 * greater than the CFG_GRAPH_DEPTH configuration variable.
 * 
 * Nodes are not released until the end of the process when all
 * allocated memory is automatically released.  Node types that require
 * a special destructor will have to handle that by some other means,
 * since this node module has no concept of node destructors.
 * 
 * Parameters:
 * 
 *   pInstance - the node instance data passed through to fp
 * 
 *   fp - the pixel generation function for the node
 * 
 *   depth - the graph depth of the node
 * 
 * Return:
 * 
 *   the newly created node
 */
NODE *node_define(void *pInstance, fp_node fp, int32_t depth);

/*
 * Invoke the pixel generation function of a given node.
 * 
 * The render module must be in render mode when this function is called
 * or an error will occur.  The render module determines which pixel
 * will be rendered by this function call.
 * 
 * Parameters:
 * 
 *   pNode - the node to invoke
 * 
 * Return:
 * 
 *   the generated ARGB color at the current pixel being rendered, in
 *   the packed format expected by Sophistry
 */
uint32_t node_invoke(NODE *pNode);

/*
 * Return the graph depth of a given node.
 * 
 * Parameters:
 * 
 *   pNode - the node to query
 * 
 * Return:
 * 
 *   the graph depth of the node
 */
int32_t node_depth(NODE *pNode);

#endif
