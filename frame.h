#ifndef FRAME_H_INCLUDED
#define FRAME_H_INCLUDED

/*
 * frame.h
 * =======
 * 
 * Frame resource manager for Lilac.
 */

#include <stddef.h>
#include <stdint.h>

/*
 * The maximum number of frames that can be registered.
 */
#define FRAME_MAXCOUNT (1024)

/*
 * Error codes.
 * 
 * Use frame_errstr() to translate the codes to error messages.
 * Remember to update that function when modifying the error code list!
 */
#define FRAME_ERR_OK    (0)   /* No error */

/*
 * Return the total number of frames that have been registered with this
 * module.
 * 
 * Range of return value is [0, FRAME_MAXCOUNT].  This function can be
 * called at any time.
 * 
 * Return:
 * 
 *   the total number of frames
 */
int32_t frame_count(void);

/*
 * Register another frame with the frame module.
 * 
 * pPath is the path to the frame to register.  The path is recorded but
 * nothing is actually done with the file until frame_load() is called.
 * The string is copied into the module data, and altering the path
 * string after this function call therefore has no effect.
 * 
 * The function fails if too many frames have been registered, exceeding
 * the FRAME_MAXCOUNT limit.
 * 
 * A fault occurs if this function is called after frame_load() has been
 * successfully called.
 * 
 * Parameters:
 * 
 *   pPath - the path to the frame to register
 * 
 * Return:
 * 
 *   non-zero if successful, zero if too many frames
 */
int frame_enter(const char *pPath);

/*
 * Load all frames that have been registered.
 * 
 * A fault occurs if this function is called after it has already been
 * successfully called.  If this function fails, there is no change in
 * state for the module.
 * 
 * w and h are the width and height for each of the frame image files.
 * An error will occur if any frame image does not have these exact
 * dimensions.  Both w and h must be greater than zero and less than or
 * equal to SPH_IMAGE_MAXDIM defined in the libsophistry header.
 * 
 * perr points to a variable to receive an error code, and ppPath points
 * to a pointer to receive a path to an image file path that was the
 * source of the error, or NULL if no image file path is relevant.
 * 
 * The error code is one of the FRAME_ERR constants, which can be
 * translated to an error message using frame_errstr().
 * 
 * If an image file path is returned in ppPath, it remains valid for the
 * duration of the process.  Clients should NOT attempt to free it.
 * 
 * If the function succeeds, *perr is FRAME_ERR_OK and *ppPath is NULL.
 * Otherwise, *perr will have a value other than FRAME_ERR_OK.
 * 
 * The loading process goes through all frames that have been registered
 * by the frame_enter() function and loads all the decoded scanline data
 * into a memory-mapped temporary file that interleaves scanlines from
 * each of the frames.  Only one image file is decoded at a time this
 * way.
 * 
 * It is acceptable to call this function when no frames have been
 * registered.
 * 
 * Parameters:
 * 
 *   perr - pointer to variable to receive error code
 * 
 *   ppPath - pointer to pointer to receive image file path that was the
 *   source of failure
 * 
 * Return:
 * 
 *   non-zero if successful, zero if error
 */
int frame_load(int32_t w, int32_t h, int *perr, char **ppPath);

/*
 * Get a specific ARGB pixel value from a loaded frame.
 * 
 * This function may only be used after a successful call to
 * frame_load() or a fault occurs.
 * 
 * i is the index of the frame.  It must be zero or greater and less
 * than the value returned by frame_count().
 * 
 * x is the X coordinate of the pixel within the frame.  It must be zero
 * or greater, and less than the width passed to frame_load().
 * 
 * y is the Y coordinate of the pixel within the frame.  It must be zero
 * or greater, and less than the height passed to frame_load().
 * 
 * The frame module is optimized for the case when sequences of requests
 * tend to share the same Y coordinate.
 * 
 * The return value is a packed ARGB color in the same packed color
 * format used by libsophistry.
 * 
 * Parameters:
 * 
 *   i - the frame index
 * 
 *   x - the X coordinate of the pixel
 * 
 *   y - the Y coordinate of the pixel
 * 
 * Return:
 * 
 *   the packed ARGB color of the pixel
 */
uint32_t frame_pixel(int i, int32_t x, int32_t y);

/*
 * Given an error code generated by frame_load(), return an error
 * message string.
 * 
 * The error message begins with a capital letter but does not have any
 * punctuation or line breaks at the end.
 * 
 * Parameters:
 * 
 *   code - the error code
 * 
 * Return:
 * 
 *   an error message
 */
const char *frame_errstr(int code);

#endif
