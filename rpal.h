#ifndef RPAL_H_INCLUDED
#define RPAL_H_INCLUDED

/*
 * rpal.h
 * ======
 * 
 * Reverse palette module of Lilac.
 */

#include <stddef.h>
#include <stdint.h>

/*
 * The maximum number of reverse palettes that can be loaded.
 */
#define RPAL_MAXCOUNT (1024)

/*
 * Error codes.
 * 
 * Use rpal_errstr() to translate the codes to error messages.  Remember
 * to update that function when modifying the error code list!
 */
#define RPAL_ERR_OK     (0)   /* No error */

/*
 * Return the total number of reverse palettes that have been loaded
 * with this module.
 * 
 * Range of return value is [0, RPAL_MAXCOUNT].  This function can be
 * called at any time.
 * 
 * Return:
 * 
 *   the total number of frames
 */
int32_t rpal_count(void);

/*
 * Load a reverse palette.
 * 
 * pPath is the path to a text file describing the reverse palette.  It
 * has a format described by ReversePalette.md.
 * 
 * perr points to a variable to receive an error code.  The error code
 * is one of the RPAL_ERR constants, which can be translated to an error
 * message using rpal_errstr().
 * 
 * If the function succeeds, *perr is RPAL_ERR_OK.  Otherwise, *perr
 * will have a value other than RPAL_ERR_OK.
 * 
 * Parameters:
 * 
 *   pPath - the path to the reverse palette file to load
 * 
 *   perr - pointer to variable to receive error code
 * 
 * Return:
 * 
 *   non-zero if successful, zero if error
 */
int rpal_load(const char *pPath, int *perr);

/*
 * Map a specific RGB color to a string value using a specific reverse
 * palette.
 * 
 * i is the index of the reverse palette to use.  It must be zero or
 * greater and less than the value returned by rpal_count().
 * 
 * rgb is the packed RGB color to map through the reverse palette.  The
 * eight most significant bits are ignored and may have any value.  The
 * eight bits below that are the red channel value, then the green
 * channel value, and finally the least significant eight bits are the
 * blue channel value.
 * 
 * NULL is returned if the given RGB color is not found in the reverse
 * palette.
 * 
 * Parameters:
 * 
 *   i - the frame index
 * 
 *   rgb - the packed RGB color
 * 
 * Return:
 * 
 *   the string the color is mapped to, or NULL
 */
const char *rpal_map(int i, uint32_t rgb);

/*
 * Given an error code generated by rpal_load(), return an error message
 * string.
 * 
 * The error message begins with a capital letter but does not have any
 * punctuation or line breaks at the end.
 * 
 * Parameters:
 * 
 *   code - the error code
 * 
 * Return:
 * 
 *   an error message
 */
const char *rpal_errstr(int code);

#endif
